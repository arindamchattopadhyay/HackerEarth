
Problem definiton:-- https://www.hackerearth.com/challenges/college/codathon20-nitbhopal/algorithm/prime-coins-6b561b25/
#include <bits/stdc++.h>
 
using namespace std;
 
#define IO ios_base::sync_with_stdio(false);cin.tie(NULL);
#define ff first
#define ss second
 
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
 
const ll MAX = 1e5+5;
const ll inf = INT_MAX;
const ll MOD = 1e9 + 7;
 const int M = 4*MAX;
 
int tree[M] = {0};
 
//seive to store primes
/*vector<int> prime;
vector<bool> p;
void pre(){ 
  
  p.resize(MAX,true);
 
  p[0] = p[1] = false;
  for (int i = 2; i <= MAX; ++i)
  {
    if(p[i] && (long long)i*i <= MAX){
      for (int j = i*i; j <= MAX; j+=i)
      {
        p[j] = false;
      }
    }
  }
 
  for (int i = 0; i <= MAX; ++i)
  {
   if(p[i])prime.push_back(i);
  }
 
}*/
 
int sum(int l, int r, int index, int start, int end)
{
  if(end<l || start>r) return 0; //no overlap 
  if(l<=start && r>=end) return tree[index]; //total overlap
  int mid = (start+end)>>1;
  return sum(l, r, index<<1, start, mid)+ sum(l, r, index<<1|1, mid+1, end);
}
 
void upd(int index, int start, int end, int pos)
{
  if(start == end)
  {
    ++tree[index];
  }
  else
  {
    int mid = (start + end)>>1;
    if(pos <= mid)
    {
      upd(index<<1, start, mid, pos);
    }
    else
    {
      upd(index<<1|1, mid+1, end, pos);
    }
    tree[index] = tree[index<<1]+tree[index<<1|1];
  }
  
}
int spf[MAX];
 
void sieve() 
{ 
    spf[1] = 1; 
    for (int i=2; i<=MAX; i++) 
        spf[i] = i; 
  
    // separately marking spf for every even 
    // number as 2 
    for (int i=4; i<=MAX; i+=2) 
        spf[i] = 2; 
  
    for (int i=3; i*i<=MAX; i++) 
    { 
        // checking if i is prime 
        if (spf[i] == i) 
        { 
            // marking SPF for all numbers divisible by i 
            for (int j=i*i; j<=MAX; j+=i) 
  
                // marking spf[j] if it is not  
                // previously marked 
                if (spf[j]==j) 
                    spf[j] = i; 
        } 
    } 
}
int main() {
  IO;
  //pre();
  sieve();
  int q;cin>>q;
  while(q--){
    int t,x,l,r;
    cin>>t;
    if(t==1){
      cin>>x;
      int idx=0;
 
      //if(p[x])upd(1,1,MAX-1,x);
      //while(prime[idx]<=x/2){
      //  if(x%prime[idx]==0){
      //    upd(1,1,MAX-1,prime[idx]);
      //    if(prime[idx]!=x/prime[idx])upd(1,1,MAX-1,x/prime[idx]);
      //  }++idx;
      //}
      set<int> st;
      while (x != 1) 
      {  
        st.insert(spf[x]);
        x = x / spf[x]; 
      } 
 
      for(auto &x:st)upd(1,1,MAX+1,x);
    }
    else{
      cin>>l>>r;
      cout<<sum(l,r,1,1,MAX+1)<<endl;
    }
  }
  return 0;
}
